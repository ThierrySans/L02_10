package zodiac.dao.coursework;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import zodiac.definition.Student;
import zodiac.definition.coursework.Assignment;
import zodiac.util.PostgreSqlJdbc;

public class AssignmentDao {

  public List<Assignment> getAssignments(String courseCode) {
    return getAssignments(courseCode, false);
  }

  /**
   * Get all assignments of a given course. generateQuestions is false by default.
   *
   * @param courseCode the course code of the assignments
   * @param generateQuestions whether to populate the questions list or not
   * @return list of assignments belonging to the given course
   */
  public List<Assignment> getAssignments(String courseCode, Boolean generateQuestions) {
    List<Assignment> assignments = new ArrayList<>();

    Connection c;
    PreparedStatement stmt;

    String sql = "SELECT Id, Assignment_Name,Visibility "
        + "FROM Assignments "
        + "WHERE Course_Code = ? "
        + "ORDER BY Id ASC";

    try {
      c = new PostgreSqlJdbc().getConnection();
      stmt = c.prepareStatement(sql);
      stmt.setString(1, courseCode);
      ResultSet rs = stmt.executeQuery();

      while (rs.next()) {
        int id = rs.getInt("Id");
        String name = rs.getString("Assignment_Name");
        Assignment assignment = new Assignment(name, id);
        assignment.setVisibility(rs.getString("Visibility"));
        if (generateQuestions) {
          assignment.setQuestionList(new QuestionDao().getQuestions(id));
        }
        assignments.add(assignment);
      }

      rs.close();
      stmt.close();
      c.close();
    } catch (Exception e) {
      // TODO Error Handling
      System.err.println(e.getClass().getName() + ": " + e.getMessage());
    }

    return assignments;
  }

  /**
   * Add an assignment to the database.
   *
   * @param assignmentName name of the assignment
   * @param courseCode the course code that the assignment belongs to
   * @return the generated id of the assignment
   */
  public int addAssignment(String assignmentName, String courseCode) {
    String message = "-1";

    Connection c;
    PreparedStatement stmt;

    String sql = "SELECT AddEdit_Assignment(?, ?, ?)";

    try {
      c = new PostgreSqlJdbc().getConnection();
      stmt = c.prepareStatement(sql);

      stmt.setInt(1, -1);
      stmt.setString(2, courseCode);
      stmt.setString(3, assignmentName);

      ResultSet rs = stmt.executeQuery();

      rs.next();

      message = rs.getString(1);

      rs.close();
      stmt.close();
      c.close();

    } catch (Exception e) {
      // TODO Error Handling
      System.err.println(e.getClass().getName() + ": " + e.getMessage());
    }

    return Integer.parseInt(message);
  }

  /**
   * Edit the name of a given assignment.
   *
   * @param assignment an existing assignment but with an edited name
   * @return message generated by the database
   */
  public String editAssignment(Assignment assignment) {
    String message = "";

    Connection c;
    PreparedStatement stmt;

    String sql = "SELECT AddEdit_Assignment(?, ?, ?)";

    try {
      c = new PostgreSqlJdbc().getConnection();
      stmt = c.prepareStatement(sql);

      stmt.setInt(1, assignment.getId());
      stmt.setString(2, null);
      stmt.setString(3, assignment.getName());

      ResultSet rs = stmt.executeQuery();

      rs.next();

      message = rs.getString(1);

      rs.close();
      stmt.close();
      c.close();

    } catch (Exception e) {
      // TODO Error Handling
      System.err.println(e.getClass().getName() + ": " + e.getMessage());
    }

    return message;
  }

  public boolean changeAssignmentVisibility(Assignment assignment)
  {
    boolean flag=false;
    Connection c;
    PreparedStatement stmt;

    String sql = "UPDATE Assignments SET Visibility=? WHERE Id = ? ";

    String visibility="";
    if("on".equals(assignment.getVisibility()))
    {
      visibility="false";
    }else
    {
      visibility="on";
    }

    try {
      c = new PostgreSqlJdbc().getConnection();
      stmt = c.prepareStatement(sql);
      stmt.setString(1, visibility);
      stmt.setInt(2, assignment.getId());

      stmt.execute();
      stmt.close();
      c.close();
      flag=true;
    } catch (Exception e) {
       return flag;
    }
    return flag;

  }


}
